{
  "hash": "cfb52c1afecb0bd28f0eae196becda01",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"SQLite ICA1 part 1\"\n---\n\n\n### Clear console on each execute and set chunk default to not show code\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncat('\\014')\n```\n\n\f\n:::\n\n\n### Download and load libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!require(\"DBI\"))\n  install.packages(\"DBI\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: DBI\n```\n\n\n:::\n\n```{.r .cell-code}\nif(!require(\"dplyr\"))\n  install.packages(\"dplyr\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: dplyr\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\nif(!require(\"tidyverse\"))\n  install.packages(\"tidyverse\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: tidyverse\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'stringr' was built under R version 4.3.2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.4\n✔ ggplot2   3.4.4     ✔ stringr   1.5.1\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.0\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(DBI)\nlibrary(dplyr)\nlibrary(tidyverse)\nlibrary(knitr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'knitr' was built under R version 4.3.2\n```\n\n\n:::\n:::\n\n\n### Connection to the database\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconn <- dbConnect(RSQLite::SQLite(), dbname = \"ICA_2023.sqlite\")\n```\n:::\n\n\n## Section A\n\n### Query for section 1 question 1\n\n#### Lists the budget and amount of projects based on country\n\n\n::: {.cell}\n\n```{.r .cell-code}\nQ1.1 <- dbGetQuery(conn, \"SELECT \n                        cs.customerCountry as country, \n                        sum(ps.budget) as totalBudget,\n                        count(ps.projectId) as ammtOfProjects \n                  FROM \n                      customers cs \n                  JOIN \n                      projects ps ON cs. customerId = ps.customerId \n                  GROUP BY \n                          country \n                  ORDER BY \n                          totalBudget DESC;\")\n\nkable(Q1.1)\n```\n\n::: {.cell-output-display}\n\n\n|country     | totalBudget| ammtOfProjects|\n|:-----------|-----------:|--------------:|\n|Spain       |      650000|              2|\n|UK          |      550000|              2|\n|Netherlands |      400000|              1|\n|Italy       |      250000|              1|\n|France      |      200000|              1|\n|Germany     |      150000|              1|\n\n\n:::\n:::\n\n\n### Query for section 1 question 2\n\n#### Used to display average development time of a project based on the number of assets used\n\n\n::: {.cell}\n\n```{.r .cell-code}\nQ1.2 <- dbGetQuery(conn, \"SELECT \n                        ps.projectId,\n                        count(a.assetId) as totalAssets,\n                        julianday(ps.enddate) - julianday(ps.startdate)                             as avgDevTime\n                  FROM  \n                      projects ps\n                  JOIN\n                      assets a ON ps.projectId = a.projectId\n                  GROUP BY\n                          ps.projectId;\")\n\nkable(Q1.2)\n```\n\n::: {.cell-output-display}\n\n\n| ProjectID| totalAssets| avgDevTime|\n|---------:|-----------:|----------:|\n|       101|          10|        272|\n|       102|          11|         91|\n|       103|          11|        272|\n|       104|          10|        153|\n\n\n:::\n:::\n\n\n### Query for section 1 question 3\n\n#### Used to show the top 3 developers according to the ammount of completed projects\n\n\n::: {.cell}\n\n```{.r .cell-code}\nQ1.3 <- dbGetQuery(conn, \"SELECT\n                        ds.name as developerName,\n                        count(ps.projectId) as completedProjects\n                  FROM\n                      developers ds\n                  JOIN\n                      projectdevelopers pds ON \n                      ds.developerId = pds.developerId\n                  JOIN\n                      projects ps ON pds.projectId = ps.projectId\n                  WHERE\n                       ps.status = 'Completed'\n                  GROUP BY\n                          ds.developerId, developerName\n                  ORDER BY\n                          completedProjects DESC\n                  LIMIT 3;\")\n\nkable(Q1.3)\n```\n\n::: {.cell-output-display}\n\n\n|developerName | completedProjects|\n|:-------------|-----------------:|\n|Morgan Lee    |                 2|\n|Alice Johnson |                 1|\n|Jordan Kim    |                 1|\n\n\n:::\n:::\n\n\n### Query for section 2 question 1\n\n#### Shows the relation of the amount of models and textures compared to budget\n\n\n::: {.cell}\n\n```{.r .cell-code}\nQ2.1 <- dbGetQuery(conn, \"SELECT\n                        ps.projectName,\n                        COUNT(a.type) AS totalAssets,\n                        ps.budget\n                  FROM\n                      projects ps\n                  JOIN\n                      assets a ON ps.projectId = a.projectId\n                  WHERE \n                       a.type LIKE '%3D Model%' OR a.type LIKE '%Texture%'\n                       OR a.type LIKE '%Animation%'\n                  GROUP BY\n                          ps.projectId\n                  ORDER BY \n                          ps.budget;\")\n\nkable(Q2.1)\n```\n\n::: {.cell-output-display}\n\n\n|ProjectName     | totalAssets| Budget|\n|:---------------|-----------:|------:|\n|Galaxy Quest    |           2| 100000|\n|Shadow Legacy   |           4| 150000|\n|Mystic Realms   |           2| 200000|\n|Urban Adventure |           5| 250000|\n\n\n:::\n:::\n\n\n### Query for section 2 question 2\n\n#### Shows unique types of assets in the projects\n\n\n::: {.cell}\n\n```{.r .cell-code}\nQ2.2 <- dbGetQuery(conn, \"SELECT\n                        DISTINCT type\n                  FROM\n                      assets\n                  ORDER BY \n                          creationDate;\")\n\nkable(Q2.2)\n```\n\n::: {.cell-output-display}\n\n\n|Type               |\n|:------------------|\n|Level Design       |\n|Texture            |\n|Cinematic          |\n|UI Element         |\n|3D Model           |\n|Animation          |\n|Character Model    |\n|Gameplay Script    |\n|Environment Design |\n|Sound              |\n\n\n:::\n:::\n\n\n### Query for section 2 question 3\n\n#### See all developers working on a specific project\n\n\n::: {.cell}\n\n```{.r .cell-code}\nQ2.3 <- dbGetQuery(conn, \"SELECT\n                          name\n                      FROM\n                          developers\n                     WHERE\n                          DeveloperId IN \n                          (SELECT\n                                 developerId\n                           FROM\n                               projectDevelopers\n                           WHERE\n                                ProjectId = 102);\")\n\nkable(Q2.3)\n```\n\n::: {.cell-output-display}\n\n\n|Name       |\n|:----------|\n|Morgan Lee |\n\n\n:::\n:::\n\n\n## Section B\n\n### Part 1\n\n#### Dataframe from database query for table creation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nQB <- dbGetQuery(conn, \"SELECT\n                        ps.budget,\n                        COUNT(ads.developerId) AS developers\n                  FROM\n                      projects ps\n                  JOIN\n                      assets a ON a.projectId = ps.projectId\n                  JOIN\n                      assetsdevelopers ads ON ads.assetId = a.assetId\n                  GROUP BY\n                          ps.projectId, ps.budget;\")\nprojectData <- as.data.frame(QB)\n\nhead(projectData)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Budget developers\n1 100000         10\n2 200000         11\n3 150000         11\n4 250000         10\n```\n\n\n:::\n\n```{.r .cell-code}\nprojectData %>%\n  lm(Budget ~ developers, data = .) %>%\n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = Budget ~ developers, data = .)\n\nResiduals:\n     1      2      3      4 \n-75000  25000 -25000  75000 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)\n(Intercept)  1.750e+05  8.310e+05   0.211    0.853\ndevelopers  -8.731e-11  7.906e+04   0.000    1.000\n\nResidual standard error: 79060 on 2 degrees of freedom\nMultiple R-squared:  1.084e-30,\tAdjusted R-squared:   -0.5 \nF-statistic: 2.168e-30 on 1 and 2 DF,  p-value: 1\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot(projectData,aes(x = Budget, y = developers)) + geom_point() +geom_smooth(method = \"lm\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n## Disconnecting from the database\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbDisconnect(conn)\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}