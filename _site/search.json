[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SQLite ICA1 part 1",
    "section": "",
    "text": "### Clear console on each execute and set chunk default to not show code\n\ncat('\\014')\n\n### Download and load libraries\n\nif(!require(\"DBI\"))\n  install.packages(\"DBI\")\n\nLoading required package: DBI\n\nif(!require(\"dplyr\"))\n  install.packages(\"dplyr\")\n\nLoading required package: dplyr\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nif(!require(\"tidyverse\"))\n  install.packages(\"tidyverse\")\n\nLoading required package: tidyverse\n\n\nWarning: package 'stringr' was built under R version 4.3.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.4\n✔ ggplot2   3.4.4     ✔ stringr   1.5.1\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.0\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(DBI)\nlibrary(dplyr)\nlibrary(tidyverse)\n\n\n### Connection to the database\n\nconn &lt;- dbConnect(RSQLite::SQLite(), dbname = \"ICA_2023.sqlite\")\n\n\n### Query for section 1 question 1\n\n#### Lists the budget and amount of projects based on country\n\ndbGetQuery(conn, \"SELECT \n                        cs.customerCountry as country, \n                        sum(ps.budget) as totalBudget,\n                        count(ps.projectId) as ammtOfProjects \n                  FROM \n                      customers cs \n                  JOIN \n                      projects ps ON cs. customerId = ps.customerId \n                  GROUP BY \n                          country \n                  ORDER BY \n                          totalBudget DESC;\")\n\n      country totalBudget ammtOfProjects\n1       Spain      650000              2\n2          UK      550000              2\n3 Netherlands      400000              1\n4       Italy      250000              1\n5      France      200000              1\n6     Germany      150000              1\n\n\n\n### Query for section 1 question 2\n\n#### Used to display average development time of a project based on the number of assets used\n\ndbGetQuery(conn, \"SELECT \n                        ps.projectId,\n                        count(a.assetId) as totalAssets,\n                        julianday(ps.enddate) - julianday(ps.startdate)                             as avgDevTime\n                  FROM  \n                      projects ps\n                  JOIN\n                      assets a ON ps.projectId = a.projectId\n                  GROUP BY\n                          ps.projectId;\")\n\n  ProjectID totalAssets avgDevTime\n1       101          10        272\n2       102          11         91\n3       103          11        272\n4       104          10        153\n\n\n\n### Query for section 1 question 3\n\n#### Used to show the top 3 developers according to the ammount of completed projects \n\ndbGetQuery(conn, \"SELECT\n                        ds.name as developerName,\n                        count(ps.projectId) as completedProjects\n                  FROM\n                      developers ds\n                  JOIN\n                      projectdevelopers pds ON \n                      ds.developerId = pds.developerId\n                  JOIN\n                      projects ps ON pds.projectId = ps.projectId\n                  WHERE\n                       ps.status = 'Completed'\n                  GROUP BY\n                          ds.developerId, developerName\n                  ORDER BY\n                          completedProjects DESC\n                  LIMIT 3;\")\n\n  developerName completedProjects\n1    Morgan Lee                 2\n2 Alice Johnson                 1\n3    Jordan Kim                 1\n\n\n\n### Query for section 2 question 1\n\n#### Shows the relation of the amount of models and textures compared to budget\ndbGetQuery(conn, \"SELECT\n                        ps.projectName,\n                        COUNT(a.type) AS totalAssets,\n                        ps.budget\n                  FROM\n                      projects ps\n                  JOIN\n                      assets a ON ps.projectId = a.projectId\n                  WHERE \n                       a.type LIKE '%3D Model%' OR a.type LIKE '%Texture%'\n                       OR a.type LIKE '%Animation%'\n                  GROUP BY\n                          ps.projectId\n                  ORDER BY \n                          ps.budget;\")\n\n      ProjectName totalAssets Budget\n1    Galaxy Quest           2 100000\n2   Shadow Legacy           4 150000\n3   Mystic Realms           2 200000\n4 Urban Adventure           5 250000\n\n\n\n### Query for section 2 question 2\n\n#### Shows unique types of assets in the projects\n\ndbGetQuery(conn, \"SELECT\n                        DISTINCT type\n                  FROM\n                      assets\n                  ORDER BY \n                          creationDate;\")\n\n                 Type\n1        Level Design\n2             Texture\n3           Cinematic\n4          UI Element\n5            3D Model\n6           Animation\n7     Character Model\n8     Gameplay Script\n9  Environment Design\n10              Sound\n\n\n\n### Query for section 2 question 3\n\n#### See all developers working on a specific project\n\ndbGetQuery(conn, \"SELECT\n                        name\n                  FROM\n                      developers\n                  WHERE\n                       DeveloperId IN \n                       (SELECT\n                              developerId\n                        FROM\n                            projectDevelopers\n                        WHERE\n                             ProjectId = 102);\")\n\n        Name\n1 Morgan Lee\n\n\n\n### Disconnecting from the database\ndbDisconnect(conn)"
  },
  {
    "objectID": "2023_DAIE_ICA_1_LH/index.html",
    "href": "2023_DAIE_ICA_1_LH/index.html",
    "title": "SQLite ICA1 part 1",
    "section": "",
    "text": "1+1\n\n[1] 2"
  },
  {
    "objectID": "2023_DAIE_ICA_1_LH/about.html",
    "href": "2023_DAIE_ICA_1_LH/about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  }
]