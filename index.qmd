---
title: "SQLite ICA1 part 1"
---

### Clear console on each execute and set chunk default to not show code

```{r}
cat('\014')
```

### Download and load libraries

```{r}
if(!require("DBI"))
  install.packages("DBI")
if(!require("dplyr"))
  install.packages("dplyr")
if(!require("tidyverse"))
  install.packages("tidyverse")

library(DBI)
library(dplyr)
library(tidyverse)
library(knitr)
```

### Connection to the database

```{r}
conn <- dbConnect(RSQLite::SQLite(), dbname = "ICA_2023.sqlite")
```

## Section A

### Query for section 1 question 1

#### Lists the budget and amount of projects based on country

```{r}
Q1.1 <- dbGetQuery(conn, "SELECT 
                        cs.customerCountry as country, 
                        sum(ps.budget) as totalBudget,
                        count(ps.projectId) as ammtOfProjects 
                  FROM 
                      customers cs 
                  JOIN 
                      projects ps ON cs. customerId = ps.customerId 
                  GROUP BY 
                          country 
                  ORDER BY 
                          totalBudget DESC;")

kable(Q1.1)
```

### Query for section 1 question 2

#### Used to display average development time of a project based on the number of assets used

```{r}
Q1.2 <- dbGetQuery(conn, "SELECT 
                        ps.projectId,
                        count(a.assetId) as totalAssets,
                        julianday(ps.enddate) - julianday(ps.startdate)                             as avgDevTime
                  FROM  
                      projects ps
                  JOIN
                      assets a ON ps.projectId = a.projectId
                  GROUP BY
                          ps.projectId;")

kable(Q1.2)
```

### Query for section 1 question 3

#### Used to show the top 3 developers according to the ammount of completed projects

```{r}
Q1.3 <- dbGetQuery(conn, "SELECT
                        ds.name as developerName,
                        count(ps.projectId) as completedProjects
                  FROM
                      developers ds
                  JOIN
                      projectdevelopers pds ON 
                      ds.developerId = pds.developerId
                  JOIN
                      projects ps ON pds.projectId = ps.projectId
                  WHERE
                       ps.status = 'Completed'
                  GROUP BY
                          ds.developerId, developerName
                  ORDER BY
                          completedProjects DESC
                  LIMIT 3;")

kable(Q1.3)
```

### Query for section 2 question 1

#### Shows the relation of the amount of models and textures compared to budget

```{r}
Q2.1 <- dbGetQuery(conn, "SELECT
                        ps.projectName,
                        COUNT(a.type) AS totalAssets,
                        ps.budget
                  FROM
                      projects ps
                  JOIN
                      assets a ON ps.projectId = a.projectId
                  WHERE 
                       a.type LIKE '%3D Model%' OR a.type LIKE '%Texture%'
                       OR a.type LIKE '%Animation%'
                  GROUP BY
                          ps.projectId
                  ORDER BY 
                          ps.budget;")

kable(Q2.1)
```

### Query for section 2 question 2

#### Shows unique types of assets in the projects

```{r}
Q2.2 <- dbGetQuery(conn, "SELECT
                        DISTINCT type
                  FROM
                      assets
                  ORDER BY 
                          creationDate;")

kable(Q2.2)
```

### Query for section 2 question 3

#### See all developers working on a specific project

```{r}
Q2.3 <- dbGetQuery(conn, "SELECT
                          name
                      FROM
                          developers
                     WHERE
                          DeveloperId IN 
                          (SELECT
                                 developerId
                           FROM
                               projectDevelopers
                           WHERE
                                ProjectId = 102);")

kable(Q2.3)
```

## Section B

### Part 1

#### Dataframe from database query for table creation

```{r}
QB <- dbGetQuery(conn, "SELECT
                        ps.budget,
                        COUNT(ads.developerId) AS developers
                  FROM
                      projects ps
                  JOIN
                      assets a ON a.projectId = ps.projectId
                  JOIN
                      assetsdevelopers ads ON ads.assetId = a.assetId
                  GROUP BY
                          ps.projectId, ps.budget;")
projectData <- as.data.frame(QB)

head(projectData)

projectData %>%
  lm(Budget ~ developers, data = .) %>%
  summary()

ggplot(projectData,aes(x = Budget, y = developers)) + geom_point() +geom_smooth(method = "lm")
```

### Part 2

As there are a very limited number of entries the values we are getting are all over the place and we can not read anything from them since the t value is 0 and the p value is 1 we can not conclude anything from this and can only see that this result we got is 100% random and we have 100% of p value meaning we can not reject the null hypothesis either meaning that for any conclusion we need a bigger sample.

### Part 3

The reliability of the model is nonexistent and can not be for sure determined with this amount of data as all the values are the worst possible for a definite conclusion of a hypothesis and because of that there can be no outliers either.

## Section E

In the first part of the assignment is when I learned the way to connect the R program to the sql database and do queries on it. those queries were than used to make tables that would than display custom formatting of the data. Next thing that I learned was the making of dataframes with the queries that were executed and putting that data on a plot to represent it visually. Next in part C was learning how to set up an interactive webpage and than populate with tables and plots learned in parts a and b.

The way this knowledge can be applied in a gaming industry is simple. It is the only way to effectively measure how well the game is doing or analyse how well it will do to measure if it is worth to make it and if it will earn money or not.

## Disconnecting from the database

```{r}
dbDisconnect(conn)
```
